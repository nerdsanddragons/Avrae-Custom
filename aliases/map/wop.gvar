<drac2>
if args.last('distance'):
 fName = sName = ""
 cardinal = ["N", "NNE", "NE", "ENE", "E", "ESE", "SE", "SSE", "S", "SSW", "SW", "WSW","W", "WNW", "NW", "NNW"]
 tan = [[0,0.0000],[1,0.0175],[2,0.0349],[3,0.0524],[4,0.0699],[5,0.0875],[6,0.1051],[7,0.1228],[8,0.1405],[9,0.1584],[10,0.1763],[11,0.1944],[12,0.2126],[13,0.2309],[14,0.2493],[15,0.2679],[16,0.2867],[17,0.3057],[18,0.3249],[19,0.3443],[20,0.3640],[21,0.3839],[22,0.4040],[23,0.4245],[24,0.4452],[25,0.4663],[26,0.4877],[27,0.5095],[28,0.5317],[29,0.5543],[30,0.5774],[31,0.6009],[32,0.6249],[33,0.6494],[34,0.6745],[35,0.7002],[36,0.7265],[37,0.7536],[38,0.7813],[39,0.8098],[40,0.8391],[41,0.8693],[42,0.9004],[43,0.9325],[44,0.9657],[45,1.0000],[46,1.0355],[47,1.0724],[48,1.1106],[49,1.1504],[50,1.1918],[51,1.2349],[52,1.2799],[53,1.3270],[54,1.3764],[55,1.4281],[56,1.4826],[57,1.5399],[58,1.6003],[59,1.6643],[60,1.7321],[61,1.8040],[62,1.8807],[63,1.9626],[64,2.0503],[65,2.1445],[66,2.2460],[67,2.3559],[68,2.4751],[69,2.6051],[70,2.7475],[71,2.9042],[72,3.0777],[73,3.2709],[74,3.4874],[75,3.7321],[76,4.0108],[77,4.3315],[78,4.7046],[79,5.1446],[80,5.6713],[81,6.3138],[82,7.1154],[83,8.1443],[84,9.5144],[85,11.4301],[86,14.3007],[87,19.0811],[88,28.6363],[89,57.2900]]
 argsColor = args.last('distance').split(',')
 argsDist = argsColor[0].split(':')
 height = int(argsDist[2] if len(argsDist) > 2 else "0")
 prevLoc = argsDist[0] if len(argsDist) > 1 else "A1" if argsDist else ""
 if c and (firstTarget := c.get_combatant(prevLoc)):
  if (note := firstTarget.note) and 'Location: ' in note:
   note=note.split(" | ")
   note={x[0].lower():x[1] for x in [item.split(": ") for item in note]}
   prevLoc = note['location']
   height -= int(note.get('height', "0"))
   fName = firstTarget.name + " "
  else:
   prevLoc = None
 newLoc = argsDist[1] if len(argsDist) > 1 else argsDist[0] if argsDist else ""
 if c and (secondTarget := c.get_combatant(newLoc)):
  if (note := secondTarget.note) and 'Location: ' in note:
   note=note.split(" | ")
   note={x[0].lower():x[1] for x in [item.split(": ") for item in note]}
   newLoc = note['location']
   height += int(note.get('height', "0"))
   sName = secondTarget.name + " "
   if sName and len(argsDist) == 1:
    firstTarget = c.me or c.current
    if (note := firstTarget.note) and 'Location: ' in note:
     note=note.split(" | ")
     note={x[0].lower():x[1] for x in [item.split(": ") for item in note]}
     prevLoc = note['location']
     height -= int(note.get('height', "0"))
     fName = firstTarget.name + " "
  else:
   newLoc = None
 height = height//5
 if prevLoc and newLoc and argsDist:
  prevLocX = ''.join(x.upper() for x in prevLoc if x.isalpha()) or 'A'
  prevLocY = ''.join(y for y in prevLoc if y.isdigit())
  prevLocY = int(prevLocY or 0)
  newLocX = ''.join(x.upper() for x in newLoc if x.isalpha())or 'A'
  newLocY = int(''.join(y for y in newLoc if y.isdigit()) or 0)
  deltaX, deltaY = alph.index(newLocX)-alph.index(prevLocX), -1*(int(newLocY)-int(prevLocY))
  distanceT = int(round(sqrt((deltaX*deltaX)+(deltaY*deltaY)),0))*5
  absDeltaX, absDeltaY = deltaX if deltaX>=0 else deltaX*-1,deltaY if deltaY>=0 else deltaY*-1
  distance = max(absDeltaX, absDeltaY, height)*5
  distanceT = round(sqrt((deltaX*deltaX)+(deltaY*deltaY)),2)
  distanceT = (round(sqrt((distanceT*distanceT) + (height*height)),2))*5 if height else distanceT*5
  quad=0 if deltaX>=0 and deltaY>=0 else 1 if deltaX>=0 and deltaY<=0 else 2 if deltaX<=0 and deltaY<=0 else 3
  if deltaY and deltaX:
    degree = ([i[0] for i in tan if i[1]>=(absDeltaX)/(absDeltaY)][0])
    degree = (180 - degree) if quad == 1 else (180 + degree) if quad == 2 else (360 - degree) if quad == 3 else degree
  else:
    degree = 0 if deltaY > 0 else 180 if deltaY < 0 else 90 if deltaX > 0 else 270
  card = cardinal[floor((degree)//22.5)%16]
  if len(argsColor)>1:
   colr= argsColor[1]
  else:
   colr = f"~62C1BF"
  # Add the line to the overlay list
  if fName and sName != "":
   overlays.append(f"*a{distance}{colr}{prevLocX}{prevLocY}{newLocX}{newLocY}")
  elif fName != "" and sName == "":
   overlays.append(f"*a{distance}{colr}{prevLocX}{prevLocY}{newLocX}{newLocY}")
   overlays.append(f"*s5{colr}{newLocX}{newLocY}")
  elif fName == "" and sName != "":
   overlays.append(f"*a{distance}{colr}{prevLocX}{prevLocY}{newLocX}{newLocY}")
   overlays.append(f"*s5{colr}{prevLocX}{prevLocY}")
  else:
   overlays.append(f"*a{distance}{colr}{prevLocX}{prevLocY}{newLocX}{newLocY}")
   overlays.append(f"*s5{colr}{prevLocX}{prevLocY}")
   overlays.append(f"*s5{colr}{newLocX}{newLocY}")
  heightInfo = f"(Height: {height*5} ft. {'up' if height>0 else 'down' if height else ''})"
  desc.append(f"{get('fName')}({alph[alph.index(prevLocX)].upper()}{prevLocY}) -> {get('sName')}({alph[alph.index(newLocX)].upper()}{newLocY}) {heightInfo if height>0 else ''} | {~{distanceT} if get('trueDistance') else distance} ft. {card} (~{degree}Â°)")
</drac2>

<drac2>
# -options
if 'z' in mapoptions or mapoptions[0].isdigit():
     zoom = ""
     if 'z' in mapoptions:
      zoom = ",".join([char for char in mapoptions.split('z')[1][0:3] if char.isdigit() or char == "."]).replace(",", "")
     else:
      zoom = ",".join([char for char in mapoptions[0:3] if char.isdigit() or char == "."]).replace(",", "")
     desc.append(f' - Zoom set to {zoom}x')
    if 'd' in mapoptions:
     desc.append(f" - Dark Mode")
    if 'n' in mapoptions:
     desc.append(f" - Grid Hidden")
    if 'e' in mapoptions:
     desc.append(f" - Disable Border Opacity")
    if 'f' in mapoptions:
     desc.append(f" - Using alternative grid/token font")
    if 'c' in mapoptions:
     gsize = ""
     gsize = ",".join([char for char in mapoptions.split("c")[1][0:2] if char.isdigit()]).replace(",", "")
     desc.append(f' - Grid size adjusted to {gsize} px')
    if 'h' in mapoptions:
     gtrans = ""
     gtrans = ",".join([char for char in mapoptions.split("h")[1][0:2] if char.isdigit()]).replace(",", "")
     desc.append(f' - Grid transparancy adjusted to {gtrans}%')
    if 'o' in mapoptions:
     offset = ""
     offset = ",".join([char for char in mapoptions.split("o")[1][0:5] if char.isdigit() or char == ":"]).replace(",", "")
     desc.append(f" - Background Offset adjusted by {offset.replace(':', 'x')} px")
</drac2>

<drac2>
# -status
if 'z' in options or options[0].isdigit():
      zoom = ""
      if 'z' in options:
       zoom = ",".join([char for char in options.split('z')[1][0:3] if char.isdigit() or char == "."]).replace(",", "")
      else:
       zoom = ",".join([char for char in options[0:3] if char.isdigit() or char == "."]).replace(",", "")
      desc.append(f' - Zoom set to {zoom}x')
     if 'd' in options:
      desc.append(f" - Dark Mode")
     if 'n' in options:
      desc.append(f" - Grid Hidden")
     if 'e' in options:
      desc.append(f" - Disable Border Opacity")
     if 'f' in options:
      desc.append(f" - Using alternative grid/token font")
     if 'c' in options:
      gsize = ""
      gsize = ",".join([char for char in options.split("c")[1][0:2] if char.isdigit()]).replace(",", "")
      desc.append(f' - Grid size adjusted to {gsize} px')
     if 'h' in options:
      gtrans = ""
      gtrans = ",".join([char for char in options.split("h")[1][0:2] if char.isdigit()]).replace(",", "")
      desc.append(f' - Grid transparancy adjusted to {gtrans}%')
     if 'o' in options:
      offset = ""
      offset = ",".join([char for char in options.split("o")[1][0:5] if char.isdigit() or char == ":"]).replace(",", "")
      desc.append(f" - Background Offset adjusted by {offset.replace(':', 'x')} px")
</drac2>

<drac2>
# Help Menu for options
-f "_ _|**__Interface Options__**
             `-options [args]` - Changes visual options using the following arguments:
             `z<#>` - Changes the map's resolution, range 1-3, accepts fractions. The higher the value the larger the map will be, allowing to zoom in without loosing image quality. Example: `-options z1.5`
             `d` - Dark mode
             `h<#>` - Sets the grid's transparancy, range 1-99. Example: `-options h10` would set it to 10%.
             `n` - Hides the grid.
             `e` - Everything outside the map's edges becomes invisible.
             `f` - Use alternative grid/token font
             `c<#>` - Sets the grid's unit size (in px). Default: 60.
             `o<#>:<#>` - Offsets the background image (in px). Example: `-options o20:40` would offset it 20px down and 40px to the right.
             Run `-options` without a specific argument to revert its change. With no arguments it'll reset every change.
             You can set multiple settings at a time. Example: -options z2n would set the resolution at 2x and hide the grid."
</drac2>

tembed
<drac2>
testVersion = True
args = "@@@"
# args = "@@@" if typeof("@@@") == "SafeList" else &ARGS&
defaults = "&&&" if typeof("&&&") == "SafeDict" else None

# Comment the first line for `!map`, second line for `!move`
# args = argparse((['-t',combat().me.name if combat().me else combat().current.name] if combat() and (combat().me or combat().current) else []) + ['-move']+args if args else [])
args = argparse(args)





embed
<drac2>
testVersion = False
argList = &ARGS&

# Comment the first line for `!map`, second line for `!move`
# args = argparse((['-t',combat().me.name if combat().me else combat().current.name] if combat() and (combat().me or combat().current) else []) + ['-move']+argList if argList else [])
args = argparse(argList)
