!alias feattest embed {{args, cc = argparse(&ARGS&), "Feat Progress"}}
{{rr = args.last("rr", default=1, type_=int)}}
{{None if cc_exists(cc) else err("You have not yet setup your intoxication counters, run !intox to set them up! (please don't do this in the RP channels)")}}
{{dice=['1d20','2d20kh1','2d20kl1'] [args.adv()]}}
{{b = args.join('b', '+')}}
{{n = "\n"}}
{{save, dc = f"{dice}{'+'+b if b else ''}", 13}}
-title "<name> attempts to train"
-f "Meta|DC: 13"
{{' '.join([f'''-f "Save {i+1 if rr>1 else ''}|{roll}; {['Failure!', 'Critical ' if incr==2 else 'Success!'][success-1]}"''' for i in range(rr) if not (set('roll', vroll(save)) or set('success', roll.total <= dc) or set('incr', (2 if roll.raw[0].is_crit == 2 else 1) if not success else 0) or mod_cc(cc, incr) or set('total', get('total', 0) + incr))])}}
-f "{{cc}} {{f"({total:+})" if total else ''}}|{{cc_str(cc)}}"

{{a="".join(args).lower().replace(" ","") or "!"}}
{{onOff,commands,compactToggle,automaticToggle,convertCommand,help,openToggle=["Off","On"],["?","!","+","-"],a in "compact",a in "automatic",a in "convert",a in "help",args and args[0] in "open"}}
{{openModes=["None","One","All"]}}
{{settings=load_json(get("bagSettings",dump_json({"weightlessBags":["bag of holding","handy haversack","heward's handy haversack"],"customWeights":{},"weightTracking":"Off","openMode":"All","autoCoins":False,"compactCoins":False})))}}

{{coinsMaker=settings.update({"autoCoins":get("autocoins","0")=="1","compactCoins":get("compactcoins","0")=="1"}) if not "autoCoins" in settings else ''}}
{{viewMaker=settings.update({"openMode":"All"}) if not "openMode" in settings or not settings.openMode in openModes else ''}}
{{viewToggle=settings.update({"openMode":args[1].title() if openToggle and len(args)>1 and args[1].title() in openModes else "All"}) if openToggle else ''}}
{{openMode=openModes.index(settings.openMode)}}
{{automaticToggle and (settings.update({"autoCoins":settings.autoCoins==False}) or delete_cvar("autocoins")) or compactToggle and (settings.update({"compactCoins":settings.compactCoins==False}) or delete_cvar("compactcoins"))}}
{{set_cvar("bagSettings",dump_json(settings)) if compactToggle or automaticToggle or openToggle else ''}}
{{newPouch=[[coinPouchName,{x:0 for x in coinTypes}]]}}
{{set_cvar_nx("bags",dump_json(newPouch))}}
{{bagsLoaded=load_json(bags)}}
{{cvars=get_raw().get("cvars",{})}}
{{oldBags=[load_json(cvars[x])for x in cvars if x.strip("bag").isdigit()]}}
{{oldBagsConverted=[[x[0],{x[z].i:x[z].q for z in range(1,len(x))}]for x in oldBags]}}
{{deleter=[delete_cvar(f"bag{i}") for i in range(len(oldBags))]}}
{{bagsLoaded=bagsLoaded+oldBagsConverted}}
{{throwaway=bagsLoaded.pop(0) if oldBags and bagsLoaded[0][1]=={} else ""}}
{{pouch=([x for x in bagsLoaded if x[0]==coinPouchName] or newPouch)[0]}}
{{pouch in bagsLoaded or bagsLoaded.append(pouch)}}

{{amount=20(''.join([x for x in a if x in "0123456789-"])or 0)}}
{{coinType=''.join([x for x in a[1:] if not x.isdigit()])}}
{{error=not coinType in coinTypes}}
{{error or pouch[1].update({coinType:pouch[1][coinType]+amount})}}
